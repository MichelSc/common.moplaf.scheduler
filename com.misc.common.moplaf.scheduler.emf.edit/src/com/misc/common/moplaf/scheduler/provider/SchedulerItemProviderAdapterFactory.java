/**
 */
package com.misc.common.moplaf.scheduler.provider;

import com.misc.common.moplaf.scheduler.util.SchedulerAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SchedulerItemProviderAdapterFactory extends SchedulerAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SchedulerItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.Scheduler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SchedulerItemProvider schedulerItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.Scheduler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSchedulerAdapter() {
		if (schedulerItemProvider == null) {
			schedulerItemProvider = new SchedulerItemProvider(this);
		}

		return schedulerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.Solution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SolutionItemProvider solutionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.Solution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSolutionAdapter() {
		if (solutionItemProvider == null) {
			solutionItemProvider = new SolutionItemProvider(this);
		}

		return solutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.SolutionResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SolutionResourceItemProvider solutionResourceItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.SolutionResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSolutionResourceAdapter() {
		if (solutionResourceItemProvider == null) {
			solutionResourceItemProvider = new SolutionResourceItemProvider(this);
		}

		return solutionResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.SolutionTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SolutionTaskItemProvider solutionTaskItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.SolutionTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSolutionTaskAdapter() {
		if (solutionTaskItemProvider == null) {
			solutionTaskItemProvider = new SolutionTaskItemProvider(this);
		}

		return solutionTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.Move} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveItemProvider moveItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.Move}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoveAdapter() {
		if (moveItemProvider == null) {
			moveItemProvider = new MoveItemProvider(this);
		}

		return moveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.ScheduleAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScheduleAfterItemProvider scheduleAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.ScheduleAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScheduleAfterAdapter() {
		if (scheduleAfterItemProvider == null) {
			scheduleAfterItemProvider = new ScheduleAfterItemProvider(this);
		}

		return scheduleAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.ScheduleBefore} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScheduleBeforeItemProvider scheduleBeforeItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.ScheduleBefore}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScheduleBeforeAdapter() {
		if (scheduleBeforeItemProvider == null) {
			scheduleBeforeItemProvider = new ScheduleBeforeItemProvider(this);
		}

		return scheduleBeforeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.ScheduleFirst} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScheduleFirstItemProvider scheduleFirstItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.ScheduleFirst}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScheduleFirstAdapter() {
		if (scheduleFirstItemProvider == null) {
			scheduleFirstItemProvider = new ScheduleFirstItemProvider(this);
		}

		return scheduleFirstItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.ScheduleLast} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScheduleLastItemProvider scheduleLastItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.ScheduleLast}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScheduleLastAdapter() {
		if (scheduleLastItemProvider == null) {
			scheduleLastItemProvider = new ScheduleLastItemProvider(this);
		}

		return scheduleLastItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.Unschedule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnscheduleItemProvider unscheduleItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.Unschedule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnscheduleAdapter() {
		if (unscheduleItemProvider == null) {
			unscheduleItemProvider = new UnscheduleItemProvider(this);
		}

		return unscheduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.FloatExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FloatExpressionItemProvider floatExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.FloatExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFloatExpressionAdapter() {
		if (floatExpressionItemProvider == null) {
			floatExpressionItemProvider = new FloatExpressionItemProvider(this);
		}

		return floatExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.IntExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntExpressionItemProvider intExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.IntExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntExpressionAdapter() {
		if (intExpressionItemProvider == null) {
			intExpressionItemProvider = new IntExpressionItemProvider(this);
		}

		return intExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.DateExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateExpressionItemProvider dateExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.DateExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateExpressionAdapter() {
		if (dateExpressionItemProvider == null) {
			dateExpressionItemProvider = new DateExpressionItemProvider(this);
		}

		return dateExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.CandidateFloatExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CandidateFloatExpressionItemProvider candidateFloatExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.CandidateFloatExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCandidateFloatExpressionAdapter() {
		if (candidateFloatExpressionItemProvider == null) {
			candidateFloatExpressionItemProvider = new CandidateFloatExpressionItemProvider(this);
		}

		return candidateFloatExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.CandidateDateExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CandidateDateExpressionItemProvider candidateDateExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.CandidateDateExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCandidateDateExpressionAdapter() {
		if (candidateDateExpressionItemProvider == null) {
			candidateDateExpressionItemProvider = new CandidateDateExpressionItemProvider(this);
		}

		return candidateDateExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.CandidateIntExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CandidateIntExpressionItemProvider candidateIntExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.CandidateIntExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCandidateIntExpressionAdapter() {
		if (candidateIntExpressionItemProvider == null) {
			candidateIntExpressionItemProvider = new CandidateIntExpressionItemProvider(this);
		}

		return candidateIntExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.TaskCandidateFloatExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskCandidateFloatExpressionItemProvider taskCandidateFloatExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.TaskCandidateFloatExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskCandidateFloatExpressionAdapter() {
		if (taskCandidateFloatExpressionItemProvider == null) {
			taskCandidateFloatExpressionItemProvider = new TaskCandidateFloatExpressionItemProvider(this);
		}

		return taskCandidateFloatExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.TaskCandidateDateExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskCandidateDateExpressionItemProvider taskCandidateDateExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.TaskCandidateDateExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskCandidateDateExpressionAdapter() {
		if (taskCandidateDateExpressionItemProvider == null) {
			taskCandidateDateExpressionItemProvider = new TaskCandidateDateExpressionItemProvider(this);
		}

		return taskCandidateDateExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.TaskCandidateIntExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskCandidateIntExpressionItemProvider taskCandidateIntExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.TaskCandidateIntExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskCandidateIntExpressionAdapter() {
		if (taskCandidateIntExpressionItemProvider == null) {
			taskCandidateIntExpressionItemProvider = new TaskCandidateIntExpressionItemProvider(this);
		}

		return taskCandidateIntExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.SolutionCandidateDateExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SolutionCandidateDateExpressionItemProvider solutionCandidateDateExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.SolutionCandidateDateExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSolutionCandidateDateExpressionAdapter() {
		if (solutionCandidateDateExpressionItemProvider == null) {
			solutionCandidateDateExpressionItemProvider = new SolutionCandidateDateExpressionItemProvider(this);
		}

		return solutionCandidateDateExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.SolutionCandidateFloatExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SolutionCandidateFloatExpressionItemProvider solutionCandidateFloatExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.SolutionCandidateFloatExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSolutionCandidateFloatExpressionAdapter() {
		if (solutionCandidateFloatExpressionItemProvider == null) {
			solutionCandidateFloatExpressionItemProvider = new SolutionCandidateFloatExpressionItemProvider(this);
		}

		return solutionCandidateFloatExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.SolutionCandidateIntExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SolutionCandidateIntExpressionItemProvider solutionCandidateIntExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.SolutionCandidateIntExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSolutionCandidateIntExpressionAdapter() {
		if (solutionCandidateIntExpressionItemProvider == null) {
			solutionCandidateIntExpressionItemProvider = new SolutionCandidateIntExpressionItemProvider(this);
		}

		return solutionCandidateIntExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.ResourceCandidateFloatExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceCandidateFloatExpressionItemProvider resourceCandidateFloatExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.ResourceCandidateFloatExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceCandidateFloatExpressionAdapter() {
		if (resourceCandidateFloatExpressionItemProvider == null) {
			resourceCandidateFloatExpressionItemProvider = new ResourceCandidateFloatExpressionItemProvider(this);
		}

		return resourceCandidateFloatExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.ResourceCandidateDateExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceCandidateDateExpressionItemProvider resourceCandidateDateExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.ResourceCandidateDateExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceCandidateDateExpressionAdapter() {
		if (resourceCandidateDateExpressionItemProvider == null) {
			resourceCandidateDateExpressionItemProvider = new ResourceCandidateDateExpressionItemProvider(this);
		}

		return resourceCandidateDateExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.ResourceCandidateIntExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceCandidateIntExpressionItemProvider resourceCandidateIntExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.ResourceCandidateIntExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceCandidateIntExpressionAdapter() {
		if (resourceCandidateIntExpressionItemProvider == null) {
			resourceCandidateIntExpressionItemProvider = new ResourceCandidateIntExpressionItemProvider(this);
		}

		return resourceCandidateIntExpressionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (schedulerItemProvider != null) schedulerItemProvider.dispose();
		if (solutionItemProvider != null) solutionItemProvider.dispose();
		if (solutionResourceItemProvider != null) solutionResourceItemProvider.dispose();
		if (solutionTaskItemProvider != null) solutionTaskItemProvider.dispose();
		if (moveItemProvider != null) moveItemProvider.dispose();
		if (scheduleAfterItemProvider != null) scheduleAfterItemProvider.dispose();
		if (scheduleBeforeItemProvider != null) scheduleBeforeItemProvider.dispose();
		if (scheduleFirstItemProvider != null) scheduleFirstItemProvider.dispose();
		if (scheduleLastItemProvider != null) scheduleLastItemProvider.dispose();
		if (unscheduleItemProvider != null) unscheduleItemProvider.dispose();
		if (floatExpressionItemProvider != null) floatExpressionItemProvider.dispose();
		if (intExpressionItemProvider != null) intExpressionItemProvider.dispose();
		if (dateExpressionItemProvider != null) dateExpressionItemProvider.dispose();
		if (candidateFloatExpressionItemProvider != null) candidateFloatExpressionItemProvider.dispose();
		if (candidateDateExpressionItemProvider != null) candidateDateExpressionItemProvider.dispose();
		if (candidateIntExpressionItemProvider != null) candidateIntExpressionItemProvider.dispose();
		if (taskCandidateFloatExpressionItemProvider != null) taskCandidateFloatExpressionItemProvider.dispose();
		if (taskCandidateDateExpressionItemProvider != null) taskCandidateDateExpressionItemProvider.dispose();
		if (resourceCandidateFloatExpressionItemProvider != null) resourceCandidateFloatExpressionItemProvider.dispose();
		if (resourceCandidateDateExpressionItemProvider != null) resourceCandidateDateExpressionItemProvider.dispose();
		if (resourceCandidateIntExpressionItemProvider != null) resourceCandidateIntExpressionItemProvider.dispose();
		if (taskCandidateIntExpressionItemProvider != null) taskCandidateIntExpressionItemProvider.dispose();
		if (solutionCandidateDateExpressionItemProvider != null) solutionCandidateDateExpressionItemProvider.dispose();
		if (solutionCandidateFloatExpressionItemProvider != null) solutionCandidateFloatExpressionItemProvider.dispose();
		if (solutionCandidateIntExpressionItemProvider != null) solutionCandidateIntExpressionItemProvider.dispose();
	}

}
