/**
 */
package com.misc.common.moplaf.scheduler.provider;

import com.misc.common.moplaf.scheduler.util.SchedulerAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SchedulerItemProviderAdapterFactory extends SchedulerAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SchedulerItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.Scheduler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SchedulerItemProvider schedulerItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.Scheduler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSchedulerAdapter() {
		if (schedulerItemProvider == null) {
			schedulerItemProvider = new SchedulerItemProvider(this);
		}

		return schedulerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.Resource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceItemProvider resourceItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.Resource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceAdapter() {
		if (resourceItemProvider == null) {
			resourceItemProvider = new ResourceItemProvider(this);
		}

		return resourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.Solution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SolutionItemProvider solutionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.Solution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSolutionAdapter() {
		if (solutionItemProvider == null) {
			solutionItemProvider = new SolutionItemProvider(this);
		}

		return solutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.SolutionResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SolutionResourceItemProvider solutionResourceItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.SolutionResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSolutionResourceAdapter() {
		if (solutionResourceItemProvider == null) {
			solutionResourceItemProvider = new SolutionResourceItemProvider(this);
		}

		return solutionResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.SolutionTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SolutionTaskItemProvider solutionTaskItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.SolutionTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSolutionTaskAdapter() {
		if (solutionTaskItemProvider == null) {
			solutionTaskItemProvider = new SolutionTaskItemProvider(this);
		}

		return solutionTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.Move} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveItemProvider moveItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.Move}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoveAdapter() {
		if (moveItemProvider == null) {
			moveItemProvider = new MoveItemProvider(this);
		}

		return moveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.CalcSolutionAllExpressionCandidateValues} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcSolutionAllExpressionCandidateValuesItemProvider calcSolutionAllExpressionCandidateValuesItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.CalcSolutionAllExpressionCandidateValues}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcSolutionAllExpressionCandidateValuesAdapter() {
		if (calcSolutionAllExpressionCandidateValuesItemProvider == null) {
			calcSolutionAllExpressionCandidateValuesItemProvider = new CalcSolutionAllExpressionCandidateValuesItemProvider(this);
		}

		return calcSolutionAllExpressionCandidateValuesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.ResetSolutionAllExpressionCandidateValues} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResetSolutionAllExpressionCandidateValuesItemProvider resetSolutionAllExpressionCandidateValuesItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.ResetSolutionAllExpressionCandidateValues}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResetSolutionAllExpressionCandidateValuesAdapter() {
		if (resetSolutionAllExpressionCandidateValuesItemProvider == null) {
			resetSolutionAllExpressionCandidateValuesItemProvider = new ResetSolutionAllExpressionCandidateValuesItemProvider(this);
		}

		return resetSolutionAllExpressionCandidateValuesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.SolutionExpressionPropagatorFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SolutionExpressionPropagatorFunctionItemProvider solutionExpressionPropagatorFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.SolutionExpressionPropagatorFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSolutionExpressionPropagatorFunctionAdapter() {
		if (solutionExpressionPropagatorFunctionItemProvider == null) {
			solutionExpressionPropagatorFunctionItemProvider = new SolutionExpressionPropagatorFunctionItemProvider(this);
		}

		return solutionExpressionPropagatorFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.ResetSolutionExpressionCandidateValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResetSolutionExpressionCandidateValueItemProvider resetSolutionExpressionCandidateValueItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.ResetSolutionExpressionCandidateValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResetSolutionExpressionCandidateValueAdapter() {
		if (resetSolutionExpressionCandidateValueItemProvider == null) {
			resetSolutionExpressionCandidateValueItemProvider = new ResetSolutionExpressionCandidateValueItemProvider(this);
		}

		return resetSolutionExpressionCandidateValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.CalcResourceExpressionCandidateValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcResourceExpressionCandidateValueItemProvider calcResourceExpressionCandidateValueItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.CalcResourceExpressionCandidateValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcResourceExpressionCandidateValueAdapter() {
		if (calcResourceExpressionCandidateValueItemProvider == null) {
			calcResourceExpressionCandidateValueItemProvider = new CalcResourceExpressionCandidateValueItemProvider(this);
		}

		return calcResourceExpressionCandidateValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.ResetResourceExpressionCandidateValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResetResourceExpressionCandidateValueItemProvider resetResourceExpressionCandidateValueItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.ResetResourceExpressionCandidateValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResetResourceExpressionCandidateValueAdapter() {
		if (resetResourceExpressionCandidateValueItemProvider == null) {
			resetResourceExpressionCandidateValueItemProvider = new ResetResourceExpressionCandidateValueItemProvider(this);
		}

		return resetResourceExpressionCandidateValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.CalcTaskExpressionCandidateValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcTaskExpressionCandidateValueItemProvider calcTaskExpressionCandidateValueItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.CalcTaskExpressionCandidateValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcTaskExpressionCandidateValueAdapter() {
		if (calcTaskExpressionCandidateValueItemProvider == null) {
			calcTaskExpressionCandidateValueItemProvider = new CalcTaskExpressionCandidateValueItemProvider(this);
		}

		return calcTaskExpressionCandidateValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.ResetTaskExpressionCandidateValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResetTaskExpressionCandidateValueItemProvider resetTaskExpressionCandidateValueItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.ResetTaskExpressionCandidateValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResetTaskExpressionCandidateValueAdapter() {
		if (resetTaskExpressionCandidateValueItemProvider == null) {
			resetTaskExpressionCandidateValueItemProvider = new ResetTaskExpressionCandidateValueItemProvider(this);
		}

		return resetTaskExpressionCandidateValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.TaskFloatExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskFloatExpressionItemProvider taskFloatExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.TaskFloatExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskFloatExpressionAdapter() {
		if (taskFloatExpressionItemProvider == null) {
			taskFloatExpressionItemProvider = new TaskFloatExpressionItemProvider(this);
		}

		return taskFloatExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.ScheduleAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScheduleAfterItemProvider scheduleAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.ScheduleAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScheduleAfterAdapter() {
		if (scheduleAfterItemProvider == null) {
			scheduleAfterItemProvider = new ScheduleAfterItemProvider(this);
		}

		return scheduleAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.ScheduleBefore} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScheduleBeforeItemProvider scheduleBeforeItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.ScheduleBefore}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScheduleBeforeAdapter() {
		if (scheduleBeforeItemProvider == null) {
			scheduleBeforeItemProvider = new ScheduleBeforeItemProvider(this);
		}

		return scheduleBeforeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.ScheduleFirst} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScheduleFirstItemProvider scheduleFirstItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.ScheduleFirst}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScheduleFirstAdapter() {
		if (scheduleFirstItemProvider == null) {
			scheduleFirstItemProvider = new ScheduleFirstItemProvider(this);
		}

		return scheduleFirstItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.ScheduleLast} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScheduleLastItemProvider scheduleLastItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.ScheduleLast}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScheduleLastAdapter() {
		if (scheduleLastItemProvider == null) {
			scheduleLastItemProvider = new ScheduleLastItemProvider(this);
		}

		return scheduleLastItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.Unschedule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnscheduleItemProvider unscheduleItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.Unschedule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnscheduleAdapter() {
		if (unscheduleItemProvider == null) {
			unscheduleItemProvider = new UnscheduleItemProvider(this);
		}

		return unscheduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.ResourceExpressionPropagatorFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceExpressionPropagatorFunctionItemProvider resourceExpressionPropagatorFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.ResourceExpressionPropagatorFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceExpressionPropagatorFunctionAdapter() {
		if (resourceExpressionPropagatorFunctionItemProvider == null) {
			resourceExpressionPropagatorFunctionItemProvider = new ResourceExpressionPropagatorFunctionItemProvider(this);
		}

		return resourceExpressionPropagatorFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.CalcSolutionExpressionCandidateValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcSolutionExpressionCandidateValueItemProvider calcSolutionExpressionCandidateValueItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.CalcSolutionExpressionCandidateValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcSolutionExpressionCandidateValueAdapter() {
		if (calcSolutionExpressionCandidateValueItemProvider == null) {
			calcSolutionExpressionCandidateValueItemProvider = new CalcSolutionExpressionCandidateValueItemProvider(this);
		}

		return calcSolutionExpressionCandidateValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.TaskExpressionPropagatorFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskExpressionPropagatorFunctionItemProvider taskExpressionPropagatorFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.TaskExpressionPropagatorFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskExpressionPropagatorFunctionAdapter() {
		if (taskExpressionPropagatorFunctionItemProvider == null) {
			taskExpressionPropagatorFunctionItemProvider = new TaskExpressionPropagatorFunctionItemProvider(this);
		}

		return taskExpressionPropagatorFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.SolutionPropagatorFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SolutionPropagatorFunctionItemProvider solutionPropagatorFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.SolutionPropagatorFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSolutionPropagatorFunctionAdapter() {
		if (solutionPropagatorFunctionItemProvider == null) {
			solutionPropagatorFunctionItemProvider = new SolutionPropagatorFunctionItemProvider(this);
		}

		return solutionPropagatorFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.scheduler.CalcTaksExpressionCandidateValueCumulative} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcTaksExpressionCandidateValueCumulativeItemProvider calcTaksExpressionCandidateValueCumulativeItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.scheduler.CalcTaksExpressionCandidateValueCumulative}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcTaksExpressionCandidateValueCumulativeAdapter() {
		if (calcTaksExpressionCandidateValueCumulativeItemProvider == null) {
			calcTaksExpressionCandidateValueCumulativeItemProvider = new CalcTaksExpressionCandidateValueCumulativeItemProvider(this);
		}

		return calcTaksExpressionCandidateValueCumulativeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (schedulerItemProvider != null) schedulerItemProvider.dispose();
		if (resourceItemProvider != null) resourceItemProvider.dispose();
		if (taskItemProvider != null) taskItemProvider.dispose();
		if (solutionItemProvider != null) solutionItemProvider.dispose();
		if (solutionResourceItemProvider != null) solutionResourceItemProvider.dispose();
		if (solutionTaskItemProvider != null) solutionTaskItemProvider.dispose();
		if (moveItemProvider != null) moveItemProvider.dispose();
		if (calcSolutionAllExpressionCandidateValuesItemProvider != null) calcSolutionAllExpressionCandidateValuesItemProvider.dispose();
		if (resetSolutionAllExpressionCandidateValuesItemProvider != null) resetSolutionAllExpressionCandidateValuesItemProvider.dispose();
		if (solutionExpressionPropagatorFunctionItemProvider != null) solutionExpressionPropagatorFunctionItemProvider.dispose();
		if (resetSolutionExpressionCandidateValueItemProvider != null) resetSolutionExpressionCandidateValueItemProvider.dispose();
		if (calcResourceExpressionCandidateValueItemProvider != null) calcResourceExpressionCandidateValueItemProvider.dispose();
		if (resetResourceExpressionCandidateValueItemProvider != null) resetResourceExpressionCandidateValueItemProvider.dispose();
		if (calcTaskExpressionCandidateValueItemProvider != null) calcTaskExpressionCandidateValueItemProvider.dispose();
		if (resetTaskExpressionCandidateValueItemProvider != null) resetTaskExpressionCandidateValueItemProvider.dispose();
		if (taskFloatExpressionItemProvider != null) taskFloatExpressionItemProvider.dispose();
		if (scheduleAfterItemProvider != null) scheduleAfterItemProvider.dispose();
		if (scheduleBeforeItemProvider != null) scheduleBeforeItemProvider.dispose();
		if (scheduleFirstItemProvider != null) scheduleFirstItemProvider.dispose();
		if (scheduleLastItemProvider != null) scheduleLastItemProvider.dispose();
		if (unscheduleItemProvider != null) unscheduleItemProvider.dispose();
		if (resourceExpressionPropagatorFunctionItemProvider != null) resourceExpressionPropagatorFunctionItemProvider.dispose();
		if (calcSolutionExpressionCandidateValueItemProvider != null) calcSolutionExpressionCandidateValueItemProvider.dispose();
		if (taskExpressionPropagatorFunctionItemProvider != null) taskExpressionPropagatorFunctionItemProvider.dispose();
		if (solutionPropagatorFunctionItemProvider != null) solutionPropagatorFunctionItemProvider.dispose();
		if (calcTaksExpressionCandidateValueCumulativeItemProvider != null) calcTaksExpressionCandidateValueCumulativeItemProvider.dispose();
	}

}
